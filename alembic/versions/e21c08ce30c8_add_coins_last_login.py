"""add coins last_login

Revision ID: e21c08ce30c8
Revises: e3cdff7a812d
Create Date: 2025-06-03 12:00:34.376287

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e21c08ce30c8'
down_revision: Union[str, None] = 'e3cdff7a812d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text

def upgrade():
    conn = op.get_bind()

    # Enable extension (optional safety)
    conn.execute(text('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"'))

    # Set a unique placeholder email for each NULL entry
    conn.execute(text("""
        UPDATE users
        SET email = concat('user_', uuid_generate_v4(), '@placeholder.local')
        WHERE email IS NULL
    """))

    # Now safely set NOT NULL
    op.alter_column('users', 'email',
        existing_type=sa.String(),
        nullable=False)
    op.add_column('users', sa.Column('last_login', sa.DateTime(), nullable=True))

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('last_daily_claim', sa.DATE(), autoincrement=False, nullable=True))
    op.alter_column('users', 'coins',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('users', 'last_login')
    # ### end Alembic commands ###
